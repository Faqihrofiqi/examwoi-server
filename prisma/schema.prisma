// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String // Password hash
  role           Role      @default(STUDENT)
  isVerified     Boolean   @default(false)
  otp            String? // One-Time Password
  otpExpiry      DateTime? // Expiraion for OTP
  otpAttempts    Int       @default(0) // Untuk melacak percobaan OTP
  lastOtpRequest DateTime? // Timestamp permintaan OTP terakhir untuk rate limiting

  // --- Field dari Flutter UserModel ---
  username        String?
  phone           String?   @unique // Nomor telepon tetap ada sebagai data profil
  referralCode    String?
  dateOfBirth     DateTime?
  kabupaten       String?
  profinsi        String?
  profileImageUrl String? // Untuk menyimpan Base64 gambar profil
  refreshToken    String? // Untuk menyimpan refresh token

  // --- Relasi ke Fakultas ---
  facultyId String?
  faculty   Faculty? @relation(fields: [facultyId], references: [id])

  // --- Relasi ke Progres Ujian ---
  examProgress   ExamProgress[]
  otpRequestLogs OtpRequestLog[] 
  createdAt       DateTime       @default(now()) 
  updatedAt       DateTime       @updatedAt   
}

model Faculty {
  id           String         @id @default(uuid())
  name         String         @unique
  description  String?
  imageUrl     String? // Untuk menyimpan Base64 gambar fakultas (home screen)
  questions    Question[] // Soal terhubung langsung ke Fakultas
  users        User[] // Relasi balik ke User (opsional, jika ingin melihat user per fakultas)
  ExamProgress ExamProgress[]
}

model Question {
  id           String    @id @default(uuid())
  content      Json // Format terstruktur soal (teks, opsi, gambar/audio path/base64)
  rawText      String? // Format raw untuk editing di admin
  status       Status    @default(DRAFT) // DRAFT, PUBLISHED, ARCHIVED
  faculty      Faculty   @relation(fields: [facultyId], references: [id])
  facultyId    String
  createdAt    DateTime  @default(now())
  publishedAt  DateTime?
  questionType String? // "TEXT", "IMAGE", "AUDIO" (opsional, bisa dari `content` Json)
}

model ExamProgress {
  id                 String    @id @default(uuid())
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  facultyId          String
  faculty            Faculty   @relation(fields: [facultyId], references: [id])
  currentQuestionId  String? // ID soal yang sedang dikerjakan
  completedQuestions Json? // { questionId: "ans_id", isCorrect: true, timeTaken: 30 }
  score              Int? // Skor akhir ujian
  startedAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt // Otomatis update saat record berubah
  completedAt        DateTime?
  status             String    @default("IN_PROGRESS") // "IN_PROGRESS", "COMPLETED", "PAUSED"
}

// Model untuk melacak permintaan OTP (email) untuk rate limiting
model OtpRequestLog {
  id         String   @id @default(uuid())
  identifier String // Email
  type       String   @default("EMAIL_OTP") // Hanya EMAIL_OTP sekarang
  userId     String? // Opsional, jika kita bisa mengaitkan dengan user yang sudah ada
  user       User?    @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model AppConfig {
  id              String   @id @default(uuid())
  key             String   @unique // Unique key for the setting (e.g., "PRIVACY_POLICY", "APP_NAME", "BANNER_IMAGE_URL", "BACKGROUND_IMAGE_URL")
  value           String   // The actual content/URL/name
  description     String?  // Optional description for admin panel
  type            String   @default("TEXT") // e.g., "TEXT", "IMAGE_URL", "COLOR"
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
}
