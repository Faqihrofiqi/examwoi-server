// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String // Password hash
  role           Role      @default(STUDENT)
  isVerified     Boolean   @default(false)
  otp            String? // One-Time Password
  otpExpiry      DateTime? // Expiraion for OTP
  otpAttempts    Int       @default(0) // Untuk melacak percobaan OTP
  lastOtpRequest DateTime? // Timestamp permintaan OTP terakhir untuk rate limiting

  // --- Field dari Flutter UserModel ---
  username        String?
  phone           String?   @unique // Nomor telepon tetap ada sebagai data profil
  referralCode    String?
  dateOfBirth     DateTime?
  kabupaten       String?
  profinsi        String?
  profileImageUrl String? // Untuk menyimpan Base64 gambar profil
  refreshToken    String? // Untuk menyimpan refresh token

  // --- Relasi ke Fakultas (opsional, jika user punya default faculty) ---
  facultyId String?
  faculty   Faculty? @relation(fields: [facultyId], references: [id])

  // --- Relasi ke Progres Ujian ---
  examProgress   ExamProgress[]
  otpRequestLogs OtpRequestLog[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Faculty {
  id           String         @id @default(uuid())
  name         String         @unique
  description  String?
  imageUrl     String? // Untuk menyimpan Base64 gambar fakultas (home screen)
  users        User[] // Relasi balik ke User
  ExamPackage  ExamPackage[] // Paket ujian di fakultas ini
}

model Question {
  id      String  @id @default(uuid())
  content Json // Format terstruktur soal (teks, opsi, gambar/audio path/base64)
  rawText String? // Format raw untuk editing di admin
  // status    Status   @default(DRAFT)     // <-- DIHAPUS
  // publishedAt DateTime? // <-- DIHAPUS

  // Relasi ke ExamPackage (Soal sekarang milik sebuah Paket)
  examPackage   ExamPackage @relation(fields: [examPackageId], references: [id])
  examPackageId String

  createdAt    DateTime @default(now())
  questionType String? // "TEXT", "IMAGE", "AUDIO"
  // Faculty      Faculty? @relation(fields: [facultyId], references: [id]) // <-- DIHAPUS
  // facultyId    String? // <-- DIHAPUS
}

model ExamProgress {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  examPackageId String // Terhubung ke ExamPackage
  examPackage   ExamPackage @relation(fields: [examPackageId], references: [id])

  currentQuestionId  String?
  completedQuestions Json?
  score              Int?
  startedAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  completedAt        DateTime?
  status             String    @default("IN_PROGRESS") // Status progres ujian (bukan status soal)
  // Faculty            Faculty?  @relation(fields: [facultyId], references: [id]) // <-- DIHAPUS
  // facultyId          String? // <-- DIHAPUS
}

// Model untuk melacak permintaan OTP (email) untuk rate limiting
model OtpRequestLog {
  id         String   @id @default(uuid())
  identifier String // Email
  type       String   @default("EMAIL_OTP")
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model ExamPackage {
  id             String         @id @default(uuid())
  name           String         @unique
  description    String?
  faculty        Faculty        @relation(fields: [facultyId], references: [id])
  facultyId      String
  status         PackageStatus  @default(DRAFT) // Status paket: DRAFT, PUBLISHED, ARCHIVED
  publishedAt    DateTime? // Waktu paket dipublikasikan
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  questions      Question[] // Relasi ke soal-soal dalam paket ini
  examProgresses ExamProgress[] // Relasi ke progres ujian siswa untuk paket ini

  durationMinutes Int?
  totalQuestions  Int?
}

enum PackageStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Status { // <-- Enum Status ini tetap ada untuk digunakan di ExamProgress atau AppConfig jika perlu, tapi tidak di Question
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model AppConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  type        String   @default("TEXT")
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}